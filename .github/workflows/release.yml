name: Build and Release

on:
  push:
    tags:
      - "v*"
  workflow_dispatch:
    inputs:
      version:
        description: "Release version (e.g., v1.0.0)"
        required: true
        default: "v1.0.0"

jobs:
  build:
    name: Build for macOS
    runs-on: macos-latest

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: "1.21"

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"

      - name: Install Wails
        run: go install github.com/wailsapp/wails/v2/cmd/wails@latest

      - name: Prepare icons for macOS
        run: |
          mkdir -p build/appicon.iconset
          if [ ! -f "app.png" ]; then
            echo "Error: app.png not found!"
            exit 1
          fi
          sips -z 16 16 app.png --out build/appicon.iconset/icon_16x16.png
          sips -z 32 32 app.png --out build/appicon.iconset/icon_16x16@2x.png
          sips -z 32 32 app.png --out build/appicon.iconset/icon_32x32.png
          sips -z 64 64 app.png --out build/appicon.iconset/icon_32x32@2x.png
          sips -z 128 128 app.png --out build/appicon.iconset/icon_128x128.png
          sips -z 256 256 app.png --out build/appicon.iconset/icon_128x128@2x.png
          sips -z 256 256 app.png --out build/appicon.iconset/icon_256x256.png
          sips -z 512 512 app.png --out build/appicon.iconset/icon_256x256@2x.png
          sips -z 512 512 app.png --out build/appicon.iconset/icon_512x512.png
          sips -z 1024 1024 app.png --out build/appicon.iconset/icon_512x512@2x.png
          iconutil -c icns build/appicon.iconset -o build/appicon.icns
          cp app.png build/appicon.png

      - name: Install frontend dependencies
        run: |
          cd frontend
          npm install

      - name: Build application
        run: |
          wails build -platform darwin/universal -clean -ldflags="-X main.buildTimeEncryptionKey=${{ secrets.ENCRYPTION_KEY }}"

      - name: Create DMG package
        run: |
          brew install create-dmg
          mkdir -p dist
          APP_NAME="Lumen-AI.app"
          if [ ! -f "build/bin/$APP_NAME" ]; then
            echo "Error: $APP_NAME not found!"
            ls -la build/bin/
            exit 1
          fi
          create-dmg \
            --volname "Lumen AI Installer" \
            --window-pos 200 120 \
            --window-size 600 400 \
            --icon-size 100 \
            --icon "$APP_NAME" 175 190 \
            --hide-extension "$APP_NAME" \
            --app-drop-link 425 190 \
            "dist/Lumen-AI-${{ github.ref_name }}-darwin-universal.dmg" \
            "build/bin/"

      - name: Upload DMG artifact
        uses: actions/upload-artifact@v4
        with:
          name: macos-dmg
          path: dist/*

  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Download DMG artifact
        uses: actions/download-artifact@v4
        with:
          name: macos-dmg
          path: artifacts

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref_name }}
          name: Lumen AI ${{ github.ref_name }}
          body: |
            ## üöÄ Lumen AI ${{ github.ref_name }}

            ### Download for macOS:
            - üì± DMG: Download and double-click to install

            ### What's New:
            - ‚ú® Feature improvements
            - üêõ Bug fixes
            - üîß Performance optimizations

            ### Requirements:
            - For local models: Ollama, LM Studio
            - For cloud models: API keys (OpenAI, Anthropic, Google)

            **Full changelog**: https://github.com/${{ github.repository }}/compare/v1.0.0...${{ github.ref_name }}
          files: artifacts/*.dmg
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
